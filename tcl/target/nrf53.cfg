# SPDX-License-Identifier: GPL-2.0-or-later

#
# Nordic nRF53 series:
# * ARM Cortex-M33 @ 128 MHz (application core)
# * ARM Cortex-M33 @ 64 MHz (network core)
#

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME nrf53
}

# Work-area is a space in RAM used for flash programming
# By default use 16kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x4000
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x6ba02477
}

swj_newdap $_CHIPNAME cpu -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if { [using_hla] } {
	echo ""
	echo "A high level adapter (like a ST-Link) you are currently using cannot access"
	echo "the nRF53 network core. Only the application core may be debugged."
	echo ""
	echo "Additionally, the adapter cannot access the CTRL-AP used to recover the device"
	echo "from AP lock, so the 'nrf53_recover' command will not work."
	echo "Do not enable UICR APPROTECT."
	echo ""
}

adapter speed 1000

proc nrf53_setup_core {_name _ap_num _offset} {
	global _CHIPNAME
	global _WORKAREASIZE

	set target $_name.cpu
	target create $target cortex_m -dap $_CHIPNAME.dap -ap-num $_ap_num -coreid $_ap_num

	$target configure -work-area-phys [expr {0x20000000 + $_offset}] -work-area-size $_WORKAREASIZE -work-area-backup 0

	if { ![using_hla] } {
		cortex_m reset_config sysresetreq
		$target configure -event examine-fail nrf53_check_ap_lock
	}

	flash bank $_name.flash nrf53 [expr {0x00000000 + $_offset}] 0 1 1 $target
	flash bank $_name.uicr nrf53 [expr {0x00FF8000 + $_offset}] 0 1 1 $target
}

nrf53_setup_core $_CHIPNAME.app 0 0x00000000
nrf53_setup_core $_CHIPNAME.net 1 0x01000000
rename nrf53_setup_core ""

$_CHIPNAME.net.cpu configure -event reset-deassert-pre {
	global _CHIPNAME
	global _RESETMODE

	# Take network core out of Force-OFF mode if halting, so that DCB.DHCSR
	# gets the halt flag set. If we are not halting, the network core must
	# remain off so the application core can enable it at the right point in
	# the boot process.
	if {$_RESETMODE ne "run"} {
		$_CHIPNAME.app.cpu mww 0x50005614 0
	}
}

# Capture the mode of a given reset so that we can use it later in the
# reset-assert handler.
proc init_reset { mode } {
	global _RESETMODE
	set _RESETMODE $mode

	if {[using_jtag]} {
		jtag arp_init-reset
	}
}

# Test if MEM-AP is locked by UICR APPROTECT
proc nrf53_check_ap_lock {} {
	set target [target current]
	set dap [$target cget -dap]
	set ap_num [$target cget -ap-num]
	set err [catch {set csw [$dap apreg $ap_num 0x0]}]
	if {$err == 0 && [expr {$csw & (1 << 6)}] == 0} {
		if {$ap_num == 0} {
			set core "application"
		} else {
			set core "network"
		}
		echo "****** WARNING ******"
		echo "nRF53 $core core has AP lock engaged (see UICR APPROTECT register)."
		echo "Debug access is denied."
		echo "Use 'nrf53_recover' to erase and unlock the device."
		echo ""
		poll off
	}
}

# Mass erase and unlock the device using proprietary nRF CTRL-AP (AP #2 and #3)
# Use nrf53_recover to enable flashing and debug.
proc nrf53_recover {} {
	set target [target current]
	set dap [$target cget -dap]
	set ctrl_ap_num [expr {[$target cget -ap-num] + 2}]

	set IDR [$dap apreg $ctrl_ap_num 0xfc]
	if {$IDR != 0x12880000} {
		echo "Error: Cannot access nRF53 CTRL-AP!"
		return
	}

	poll off

	# Reset and trigger ERASEALL task
	$dap apreg $ctrl_ap_num 4 0
	$dap apreg $ctrl_ap_num 4 1

	for {set i 0} {1} {incr i} {
		set ERASEALLSTATUS [$dap apreg $ctrl_ap_num 8]
		if {$ERASEALLSTATUS == 0} {
			echo "$target device has been successfully erased and unlocked."
			break
		}
		if {$i == 0} {
			echo "Waiting for chip erase..."
		}
		if {$i >= 150} {
			echo "Error: $target recovery failed."
			break
		}
		sleep 100
	}

	# Assert reset
	$dap apreg $ctrl_ap_num 0 1

	# Deassert reset
	$dap apreg $ctrl_ap_num 0 0

	# Reset ERASEALL task
	$dap apreg $ctrl_ap_num 4 0

	sleep 100
	$target arp_examine
	poll on
}

add_help_text nrf53_recover "Mass erase and unlock nRF53 device"

tpiu create $_CHIPNAME.tpiu -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0xE0040000

lappend _telnet_autocomplete_skip _proc_pre_enable_$_CHIPNAME.tpiu
proc _proc_pre_enable_$_CHIPNAME.tpiu {_targetname _chipname} {
	targets $_targetname

	if { [$_chipname.tpiu cget -protocol] eq "sync" } {
		if { [$_chipname.tpiu cget -port-width] != 4 } {
			echo "Error. Device only supports 4-bit sync traces."
			return
		}

		# Configure GPIOs (output, high drive, connect to TND)
		mww 0x50842720 0x70000301 ;# GPIO.PIN_CNF[8]
		mww 0x50842724 0x70000301 ;# GPIO.PIN_CNF[9]
		mww 0x50842728 0x70000301 ;# GPIO.PIN_CNF[10]
		mww 0x5084272C 0x70000301 ;# GPIO.PIN_CNF[11]
		mww 0x50842730 0x70000301 ;# GPIO.PIN_CNF[12]
		# Enable pins for tracing
		mww 0xE0080504 0x0000000C ;# TAD.PSEL.TRACECLK
		mww 0xE0080508 0x0000000B ;# TAD.PSEL.TRACEDATA0
		mww 0xE008050C 0x0000000A ;# TAD.PSEL.TRACEDATA1
		mww 0xE0080510 0x00000009 ;# TAD.PSEL.TRACEDATA2
		mww 0xE0080514 0x00000008 ;# TAD.PSEL.TRACEDATA3
		$_targetname configure -event reset-end {
			# Configure GPIOs (output, high drive, connect to TND)
			mww 0x50842720 0x70000301 ;# GPIO.PIN_CNF[8]
			mww 0x50842724 0x70000301 ;# GPIO.PIN_CNF[9]
			mww 0x50842728 0x70000301 ;# GPIO.PIN_CNF[10]
			mww 0x5084272C 0x70000301 ;# GPIO.PIN_CNF[11]
			mww 0x50842730 0x70000301 ;# GPIO.PIN_CNF[12]
			# Enable pins for tracing
			mww 0xE0080504 0x0000000C ;# TAD.PSEL.TRACECLK
			mww 0xE0080508 0x0000000B ;# TAD.PSEL.TRACEDATA0
			mww 0xE008050C 0x0000000A ;# TAD.PSEL.TRACEDATA1
			mww 0xE0080510 0x00000009 ;# TAD.PSEL.TRACEDATA2
			mww 0xE0080514 0x00000008 ;# TAD.PSEL.TRACEDATA3
		}
	} else {
		# Configure SWO pin (output, high drive, connect to TND)
		mww 0x5084272c 0x70000301 ;# GPIO.PIN_CNF[11]
		# Enable SWO
		mww 0xE0080508 0x0000000B ;# TAD.PSEL.TRACEDATA0
		$_targetname configure -event reset-end {
			# Configure SWO pin (output, high drive, connect to TND)
			mww 0x5084272c 0x70000301 ;# GPIO.PIN_CNF[11]
			# Enable SWO
			mww 0xE0080508 0x0000000B ;# TAD.PSEL.TRACEDATA0
		}
	}
}

$_CHIPNAME.tpiu configure -event pre-enable "_proc_pre_enable_$_CHIPNAME.tpiu $_CHIPNAME.app.cpu $_CHIPNAME"
